module ALU(op,a,b,result,zero);

	input [15:0] a,b;
	input [3:0] op;
	output [15:0] result;
	output zero;
	wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15;
	
	ALU1   alu0 (a[0],b[0],op[3],op[2],op[1:0],c16, op[2],c1,result[0]),
          alu1 (a[1],b[1],op[3],op[2],op[1:0],1'b0,c1,   c2,result[1]),
      alu2 (a[2],b[2],op[3],op[2],op[1:0],1'b0,c2,   c3,result[2]),
           alu3 (a[3],b[3],op[3],op[2],op[1:0],1'b0,c3,   c4,result[3]),
      alu4 (a[4],b[4],op[3],op[2],op[1:0],1'b0,c4,   c5,result[4]),
      alu5 (a[5],b[5],op[3],op[2],op[1:0],1'b0,c5,   c6,result[5]),
      alu6 (a[6],b[6],op[3],op[2],op[1:0],1'b0,c6,   c7,result[6]),
      alu7 (a[7],b[7],op[3],op[2],op[1:0],1'b0,c7,   c8,result[7]),
      alu8 (a[8],b[8],op[3],op[2],op[1:0],1'b0,c8,   c9,result[8]),
      alu9 (a[9],b[9],op[3],op[2],op[1:0],1'b0,c9,   c10,result[9]),
      alu10 (a[10],b[10],op[3],op[2],op[1:0],1'b0,c10,   c11,result[10]),
      alu11 (a[11],b[11],op[3],op[2],op[1:0],1'b0,c11,   c12,result[11]),
      alu12 (a[12],b[12],op[3],op[2],op[1:0],1'b0,c12,   c13,result[12]),
      alu13 (a[13],b[13],op[3],op[2],op[1:0],1'b0,c13,   c14,result[13]),
      alu14 (a[14],b[14],op[3],op[2],op[1:0],1'b0,c14,   c15,result[14]);
   ALUmsb alu15 (a[15],b[15],op[3],op[2],op[1:0],1'b0,c15,   c16,result[15]);

	or or1(or01, result[0],result[1]);
	or or2(or23, result[2],result[3]);
	nor nor1(zero,or01,or23);
endmodule


module detect_overflow(overflow, carry_in, carry_out, op);
	input carry_in, carry_out;
	input [2:0] op;
	output overflow;
	wire nop, arith, over;
	
	not    g1(nop,op[0]);
	and    g2(arith, nop, op[1]);
	xor    g3(over, carry_in, carry_out);
	mux_2 mux(overflow,1'b0,over,arith);
endmodule

module halfadder(S,C,x,y);
//S = sum
//C = carry

input x,y;
output S,C;

xor x1 (S,x,y);
and a1 (C,x,y);

endmodule

module fulladder (S,C,x,y,z);
input x,y,z;
output S,C;
wire S1,C1,C2;

halfadder HA1 (S1,C1,x,y),
          HA2 (S,C2,S1,z);
    or C3(C,C2,C1);    
endmodule 

module ALU1 (a,b,Ainvert,binvert,op,less,carryin,carryout,result);
   input a,b,carryin,binvert,Ainvert;
   input [1:0] op;
   input  less;
   output carryout,result;
   wire sum, a_and_b, a_or_b, b_inv,a_inv;
   
   not not1(a_inv, a);
   not not2(b_inv, b);
   
   mux2x1 x1(a,a_inv,Ainvert,a1),
            mux1(b,b_inv,binvert,b1);
   and and1(a_and_b, a1, b1);
   or or1(a_or_b, a1, b1);

   fulladder adder1(sum,carryout,a1,b1,carryin);
   mux4x1 mux2(a_and_b,a_or_b,sum,less,op[1:0],result); 

endmodule


module ALUmsb (a,b,ainvert,binvert,op,less,carryin,carryout,result);
   input a,b,carryin,binvert,ainvert;
   input [1:0] op;
   input less;
   output carryout,result;
   wire sum, a_and_b, a_or_b, b_inv,a_inv;
   
   not not1(a_inv, a);
   not not2(b_inv, b);
   mux2x1 x1(a,a_inv,ainvert,a1),
            mux1(b,b_inv,binvert,b1);
   and and1(a_and_b, a1, b1);
   or or1(a_or_b, a1, b1);
   fulladder adder1(sum,carryout,a1,b1,carryin);
   mux4x1 mux2(a_and_b,a_or_b,sum,less,op[1:0],result); 

endmodule

module mux4x1(i0,i1,i2,i3,select,y);

	input i0,i1,i2,i3;
	input [1:0] select;
	output y;
	wire S0,S1,w1,w2,w3,w4;
	
	not not1(S0,select[0]),
		not2(S1,select[1]);
	
	and and1(w1,i0,S1,S0),
		and2(w2,i1,S1,select[0]),
		and3(w3,i2,select[1],S0),
		and4(w4,i3,select[1],select[0]);
		
	or  or1(y,w1,w2,w3,w4);
	
endmodule

module mux2x1(A,B,select,OUT); 
  input A,B,select; 
  output OUT;

  not not1(i0, select);
  and and1(i1, A, i0);
  and and2(i2, B, select);
  or or1(OUT, i1, i2);
endmodule

module mux_2(result,a,b,c);
	input a,b,c;
	output result;
	wire w1,w2,w3;

	not (w3,c);
	and g1(w1,b,c),
	    g2(w2,a,w3);
	or  g3(result,w1,w2);
endmodule


module testALU;
   reg signed [15:0] a;
   reg signed [15:0] b;
   reg [3:0] op;
   wire signed [15:0] result;
   wire zero;
   ALU alu (op,a,b,result,zero);
   initial begin
   // $display("op   a                        b                         result                  zero");
    $monitor ("op = %b a = %b %d b = %b %d | result = %b %d zero = %b",op,a,a,b,b,result,result,zero);
    //#10 op = 4'b1100; a = 15; b = 22;  // addi
    //#10 op = 4'b1100; a = 15; b = 22;  // addi
    #10 op = 4'b0000; a = 15; b = 7;  // and
    #10 op = 4'b0110; a = 15; b = 7;  //sub
    #10 op = 4'b0001; a = 8; b = 7;  // or
    #10 op = 4'b0010; a = 15; b = 7;  // add
    #10 op = 4'b0111; a = 15; b = 22;  // SLT
    #10 op = 4'b0111; a = 22; b = 15;  // SLT
    #10 op = 4'b1100; a = 15; b = 22;  // nor
   end
endmodule
